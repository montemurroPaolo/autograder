errors[[i]],
"\n",big_separator,"\n\n")
} # Output complete error message
output_0_grade("Code produces errors", format_errors, sep=.Platform$file.sep)
stop("Code produces errors. results written")
}
# source solution, if exists
if(file.exists(solution_file)){source(solution_file)}
# source submission parser
parsing_submission  <- Parser(submission_file)
submission_code <- parsing_submission[[2]]
code_length     <- parsing_submission[[3]]
first_row       <- parsing_submission[[4]]
# Distinguish between parsing or exercise
exercise_names   <- unlist(exercises)[ c(TRUE,FALSE,FALSE,FALSE,FALSE) ] #Select names
which_is_parsing <- grepl("^@ ", exercise_names)                   #Select parsing exercises
if (any(which_is_parsing))
{
parsing_ex       <- exercises[which_is_parsing]                  #Subset parsing ex
for(i in 1:length(parsing_ex)){
print(i)
parsing_ex[[i]][1] <- substring(parsing_ex[[i]][1],3)            # Delete @ and space
# isolate the keyword (between ( and , )): can't we now look between the ""?
keyword            <- regmatches(parsing_ex[[i]][2], gregexpr("(?<=\\().*?(?=,)", parsing_ex[[i]][2], perl=T))[[1]][1] # https://stackoverflow.com/questions/8613237/extract-info-inside-all-parenthesis-in-r
# TODO: add more special signs
if( length(grep("\\(", keyword))>0 ){keyword <- Replace_special_character(keyword, "(")} # Replace ( with //( for regex
word_check         <- nrow(dplyr::filter(submission_code, grepl(keyword,V1))) # check in submission code
parsing_ex[[i]][2] <- str_replace(parsing_ex[[i]][2],"(?<=\\().*?(?=,)", as.character(word_check)) # replace variable name with result
}
exercises[which_is_parsing] <- parsing_ex # Bring back to exercises
}
# test the student's submissions
lr               <- ListReporter$new()                                      ### Original code
out              <- test_file(my_test_file, reporter=lr,  env = testEnv)    ### Original code
tests            <- list()                                                  ### Original code
tests[["tests"]] <- list()                                                  ### Original code
raw_results      <- lr$results$as_list()
for(i in 1:n_tests){
ex                    <- exercises[[i]]
test_name             <- ex[1]
test_max_score        <- ex[3]
assertionResults      <- raw_results[[i]]$results
success               <- all(sapply(assertionResults, methods::is, "expectation_success"))
test_score            <- ifelse(success, test_max_score, 0)
tests[["tests"]][[i]] <- list(name = test_name,
score = test_score,
max_score = test_max_score,
visibility = "visible")
# Paste messages...
if(test_score != test_max_score){
R_error <- raw_results[[i]][["results"]][[1]][["message"]]
if(grepl("could not find|not found",R_error)){ # Paste naming error (based on R error message). Could increase the error naming list
msg <- "Your environment doesn't contain the variable/function requested. Check your naming."
}else{ # If the variable is present...
if(ex[4]!=""){ # Paste user-defined errors if specified
msg <- paste0(ex[4], "\n")
}else{ # Paste R pre-defined errors otherwise
msg <- paste0("R reports the following error(s): \n",R_error)
}
}
# Paste correct result
}else{
if(ex[5]!=""){
msg <- paste0(ex[5], "\n")}else{
msg <- "Congratulations, the answer is correct!"
}
}
# Insert the message
tests[["tests"]][[i]][["output"]] <- msg
}
#Debug stuff
if(debug){print(tests)}
# Prepare the output location
# Use / or \ .Platform$file.sep
json_filename <- paste0("..",.Platform$file.sep,"results",.Platform$file.sep,"results.json")
# now write out all the stuff to a json file
write(jsonlite::toJSON(tests, auto_unbox = T), file = json_filename)
}
calcGradesForGradescope(submission_file, my_test_file)
# (c) 2020 Peter Gruber and Paolo Montemurro
# Universita della Svizzera italiana
# Contact: peter.gruber@usi.ch
# load in the package
library(gradeR)
library(testthat)
library(stringr)
library(evaluate)
# also requires dplyr
# source the functions and the test
source("functions.R")
source("parse_txt.R") # Can be done as a function. However, for this case I guess it's more straight forward like this
# ----- SETUP <----------
#file_modus <- "local"           # "local" for debugging, if you do not have a folder /autograder/results in your structure
file_modus <- "gradescope"       # "gradescope" for production
submission_file <- paste0("..",.Platform$file.sep,"submission",.Platform$file.sep, ass_name)
# -----
my_test_file    <- "tests.R"
solution_file   <- "solution.R"
# function
calcGradesForGradescope <- function(submission_file, my_test_file, debug=FALSE){
if(missing(my_test_file)){stop("Must have a test file")} # Check test file
if(!file.exists(submission_file)) { # Check file naming
my_cmd <- paste0("ls ..",.Platform$file.sep,"submission")
student_filename <- system(my_cmd,intern = TRUE)
wrong_name_msg = paste0('Your submission cannot be evaluated, because it has an incorrect file name. The file you have submitted is called "' ,student_filename,'".')
output_0_grade("Correct file name", wrong_name_msg, .Platform$file.sep)
stop("Wrong filename. results written")
}
if(n_tests == 0){stop("you need at least one graded question")} # Check questions
testEnv <- new.env() # run student's submission in a separate environment
#tryCatch(source(submission_file, testEnv),  error = function(c) c, warning = function(c) c ,message = function(c) c)
replay(evaluate(file(submission_file))) # Run the program of the student line by line. Student can make errors. https://stackoverflow.com/questions/14612190/is-there-a-way-to-source-and-continue-after-an-error
line_by_line   <- evaluate(file(submission_file))
errors_bool    <- grepl("error", sapply(line_by_line, class))
errors         <- line_by_line[errors_bool]
# Line that created an error
error_code_bool <- errors_bool[-1] # Because code with error is always in the line before the error
code_of_errors  <- line_by_line[error_code_bool]
#warnings_bool  <- grepl("warning", sapply(line_by_line, class))
#warnings <- replay(line_by_line[warnings_bool])
if(length(errors)>0){ #if there is any error...
format_errors  <- ""
for(i in 1:length(errors)){
format_errors <- paste0(format_errors,
"--- The following script of your code produces compiling error: ---\n",
separator,"\n",code_of_errors[[i]][[1]],"\n",separator,
"\n--- Error message: ---",
errors[[i]],
"\n",big_separator,"\n\n")
} # Output complete error message
output_0_grade("Code produces errors", format_errors, sep=.Platform$file.sep)
stop("Code produces errors. results written")
}
# source solution, if exists
if(file.exists(solution_file)){source(solution_file)}
# source submission parser
parsing_submission  <- Parser(submission_file)
submission_code <- parsing_submission[[2]]
code_length     <- parsing_submission[[3]]
first_row       <- parsing_submission[[4]]
# Distinguish between parsing or exercise
exercise_names   <- unlist(exercises)[ c(TRUE,FALSE,FALSE,FALSE,FALSE) ] #Select names
which_is_parsing <- grepl("^@ ", exercise_names)                   #Select parsing exercises
if (any(which_is_parsing))
{
parsing_ex       <- exercises[which_is_parsing]                  #Subset parsing ex
for(i in 1:length(parsing_ex)){
print(i)
parsing_ex[[i]][1] <- substring(parsing_ex[[i]][1],3)            # Delete @ and space
# isolate the keyword (between ( and , )): can't we now look between the ""?
keyword            <- regmatches(parsing_ex[[i]][2], gregexpr("(?<=\\().*?(?=,)", parsing_ex[[i]][2], perl=T))[[1]][1] # https://stackoverflow.com/questions/8613237/extract-info-inside-all-parenthesis-in-r
# TODO: add more special signs
if( length(grep("\\(", keyword))>0 ){keyword <- Replace_special_character(keyword, "(")} # Replace ( with //( for regex
word_check         <- nrow(dplyr::filter(submission_code, grepl(keyword,V1))) # check in submission code
parsing_ex[[i]][2] <- str_replace(parsing_ex[[i]][2],"(?<=\\().*?(?=,)", as.character(word_check)) # replace variable name with result
}
exercises[which_is_parsing] <- parsing_ex # Bring back to exercises
}
# test the student's submissions
lr               <- ListReporter$new()                                      ### Original code
out              <- test_file(my_test_file, reporter=lr,  env = testEnv)    ### Original code
tests            <- list()                                                  ### Original code
tests[["tests"]] <- list()                                                  ### Original code
raw_results      <- lr$results$as_list()
for(i in 1:n_tests){
ex                    <- exercises[[i]]
test_name             <- ex[1]
test_max_score        <- ex[3]
assertionResults      <- raw_results[[i]]$results
success               <- all(sapply(assertionResults, methods::is, "expectation_success"))
test_score            <- ifelse(success, test_max_score, 0)
tests[["tests"]][[i]] <- list(name = test_name,
score = test_score,
max_score = test_max_score,
visibility = "visible")
# Paste messages...
if(test_score != test_max_score){
R_error <- raw_results[[i]][["results"]][[1]][["message"]]
if(grepl("could not find|not found",R_error)){ # Paste naming error (based on R error message). Could increase the error naming list
msg <- "Your environment doesn't contain the variable/function requested. Check your naming."
}else{ # If the variable is present...
if(ex[4]!=""){ # Paste user-defined errors if specified
msg <- paste0(ex[4], "\n")
}else{ # Paste R pre-defined errors otherwise
msg <- paste0("R reports the following error(s): \n",R_error)
}
}
# Paste correct result
}else{
if(ex[5]!=""){
msg <- paste0(ex[5], "\n")}else{
msg <- "Congratulations, the answer is correct!"
}
}
# Insert the message
tests[["tests"]][[i]][["output"]] <- msg
}
#Debug stuff
if(debug){print(tests)}
# Prepare the output location
# Use / or \ .Platform$file.sep
json_filename <- paste0("..",.Platform$file.sep,"results",.Platform$file.sep,"results.json")
# now write out all the stuff to a json file
write(jsonlite::toJSON(tests, auto_unbox = T), file = json_filename)
}
calcGradesForGradescope(submission_file, my_test_file)
dcinterest <- function(r,t)
# Calculates the discretely compounded interest on 1 Euro.
# INPUT	  r	1x1 .. interest rate [fractions of 1]
#         t	1x1 .. duration in yrs
# OUTPUT y  1x1 .. payoff
# USAGE   dcinterest(r,t)
# peter.gruber@usi.ch, 2011-09-01
{
tFull <- floor(t)      # full years for re-investment
tFrac <- t-tFull       # fractional years, no re-investmetn
y <- (1+r)^tFull       # Amount after tFull years
y <- y * (1+r*tFrac)   # Interest for the tFrac year
if(TRUE){print(x)
}return(y)
}
# (c) 2020 Peter Gruber and Paolo Montemurro
# Universita della Svizzera italiana
# Contact: peter.gruber@usi.ch
# load in the package
library(gradeR)
library(testthat)
library(stringr)
library(evaluate)
# also requires dplyr
# source the functions and the test
source("functions.R")
source("parse_txt.R") # Can be done as a function. However, for this case I guess it's more straight forward like this
# ----- SETUP <----------
#file_modus <- "local"           # "local" for debugging, if you do not have a folder /autograder/results in your structure
file_modus <- "gradescope"       # "gradescope" for production
submission_file <- paste0("..",.Platform$file.sep,"submission",.Platform$file.sep, ass_name)
# -----
my_test_file    <- "tests.R"
solution_file   <- "solution.R"
# function
calcGradesForGradescope <- function(submission_file, my_test_file, debug=FALSE){
if(missing(my_test_file)){stop("Must have a test file")} # Check test file
if(!file.exists(submission_file)) { # Check file naming
my_cmd <- paste0("ls ..",.Platform$file.sep,"submission")
student_filename <- system(my_cmd,intern = TRUE)
wrong_name_msg = paste0('Your submission cannot be evaluated, because it has an incorrect file name. The file you have submitted is called "' ,student_filename,'".')
output_0_grade("Correct file name", wrong_name_msg, .Platform$file.sep)
stop("Wrong filename. results written")
}
if(n_tests == 0){stop("you need at least one graded question")} # Check questions
testEnv <- new.env() # run student's submission in a separate environment
#tryCatch(source(submission_file, testEnv),  error = function(c) c, warning = function(c) c ,message = function(c) c)
replay(evaluate(file(submission_file))) # Run the program of the student line by line. Student can make errors. https://stackoverflow.com/questions/14612190/is-there-a-way-to-source-and-continue-after-an-error
line_by_line   <- evaluate(file(submission_file))
errors_bool    <- grepl("error", sapply(line_by_line, class))
errors         <- line_by_line[errors_bool]
# Line that created an error
error_code_bool <- errors_bool[-1] # Because code with error is always in the line before the error
code_of_errors  <- line_by_line[error_code_bool]
#warnings_bool  <- grepl("warning", sapply(line_by_line, class))
#warnings <- replay(line_by_line[warnings_bool])
if(length(errors)>0){ #if there is any error...
format_errors  <- ""
for(i in 1:length(errors)){
format_errors <- paste0(format_errors,
"--- The following script of your code produces compiling error: ---\n",
separator,"\n",code_of_errors[[i]][[1]],"\n",separator,
"\n--- Error message: ---",
errors[[i]],
"\n",big_separator,"\n\n")
} # Output complete error message
output_0_grade("Code produces errors", format_errors, sep=.Platform$file.sep)
stop("Code produces errors. results written")
}
# source solution, if exists
if(file.exists(solution_file)){source(solution_file)}
# source submission parser
parsing_submission  <- Parser(submission_file)
submission_code <- parsing_submission[[2]]
code_length     <- parsing_submission[[3]]
first_row       <- parsing_submission[[4]]
# Distinguish between parsing or exercise
exercise_names   <- unlist(exercises)[ c(TRUE,FALSE,FALSE,FALSE,FALSE) ] #Select names
which_is_parsing <- grepl("^@ ", exercise_names)                   #Select parsing exercises
if (any(which_is_parsing))
{
parsing_ex       <- exercises[which_is_parsing]                  #Subset parsing ex
for(i in 1:length(parsing_ex)){
print(i)
parsing_ex[[i]][1] <- substring(parsing_ex[[i]][1],3)            # Delete @ and space
# isolate the keyword (between ( and , )): can't we now look between the ""?
keyword            <- regmatches(parsing_ex[[i]][2], gregexpr("(?<=\\().*?(?=,)", parsing_ex[[i]][2], perl=T))[[1]][1] # https://stackoverflow.com/questions/8613237/extract-info-inside-all-parenthesis-in-r
# TODO: add more special signs
if( length(grep("\\(", keyword))>0 ){keyword <- Replace_special_character(keyword, "(")} # Replace ( with //( for regex
word_check         <- nrow(dplyr::filter(submission_code, grepl(keyword,V1))) # check in submission code
parsing_ex[[i]][2] <- str_replace(parsing_ex[[i]][2],"(?<=\\().*?(?=,)", as.character(word_check)) # replace variable name with result
}
exercises[which_is_parsing] <- parsing_ex # Bring back to exercises
}
# test the student's submissions
lr               <- ListReporter$new()                                      ### Original code
out              <- test_file(my_test_file, reporter=lr,  env = testEnv)    ### Original code
tests            <- list()                                                  ### Original code
tests[["tests"]] <- list()                                                  ### Original code
raw_results      <- lr$results$as_list()
for(i in 1:n_tests){
ex                    <- exercises[[i]]
test_name             <- ex[1]
test_max_score        <- ex[3]
assertionResults      <- raw_results[[i]]$results
success               <- all(sapply(assertionResults, methods::is, "expectation_success"))
test_score            <- ifelse(success, test_max_score, 0)
tests[["tests"]][[i]] <- list(name = test_name,
score = test_score,
max_score = test_max_score,
visibility = "visible")
# Paste messages...
if(test_score != test_max_score){
R_error <- raw_results[[i]][["results"]][[1]][["message"]]
if(grepl("could not find|not found",R_error)){ # Paste naming error (based on R error message). Could increase the error naming list
msg <- "Your environment doesn't contain the variable/function requested. Check your naming."
}else{ # If the variable is present...
if(ex[4]!=""){ # Paste user-defined errors if specified
msg <- paste0(ex[4], "\n")
}else{ # Paste R pre-defined errors otherwise
msg <- paste0("R reports the following error(s): \n",R_error)
}
}
# Paste correct result
}else{
if(ex[5]!=""){
msg <- paste0(ex[5], "\n")}else{
msg <- "Congratulations, the answer is correct!"
}
}
# Insert the message
tests[["tests"]][[i]][["output"]] <- msg
}
#Debug stuff
if(debug){print(tests)}
# Prepare the output location
# Use / or \ .Platform$file.sep
json_filename <- paste0("..",.Platform$file.sep,"results",.Platform$file.sep,"results.json")
# now write out all the stuff to a json file
write(jsonlite::toJSON(tests, auto_unbox = T), file = json_filename)
}
calcGradesForGradescope(submission_file, my_test_file)
code_of_errors
if(missing(my_test_file)){stop("Must have a test file")} # Check test file
if(!file.exists(submission_file)) { # Check file naming
my_cmd <- paste0("ls ..",.Platform$file.sep,"submission")
student_filename <- system(my_cmd,intern = TRUE)
wrong_name_msg = paste0('Your submission cannot be evaluated, because it has an incorrect file name. The file you have submitted is called "' ,student_filename,'".')
output_0_grade("Correct file name", wrong_name_msg, .Platform$file.sep)
stop("Wrong filename. results written")
}
if(n_tests == 0){stop("you need at least one graded question")} # Check questions
testEnv <- new.env() # run student's submission in a separate environment
#tryCatch(source(submission_file, testEnv),  error = function(c) c, warning = function(c) c ,message = function(c) c)
replay(evaluate(file(submission_file))) # Run the program of the student line by line. Student can make errors. https://stackoverflow.com/questions/14612190/is-there-a-way-to-source-and-continue-after-an-error
line_by_line   <- evaluate(file(submission_file))
errors_bool    <- grepl("error", sapply(line_by_line, class))
errors         <- line_by_line[errors_bool]
# Line that created an error
error_code_bool <- errors_bool[-1] # Because code with error is always in the line before the error
code_of_errors  <- line_by_line[error_code_bool]
code_of_errors
code_of_errors[[1]][1]
length(code_of_errors[[1]][1])
nchar(code_of_errors[[1]][1])
# (c) 2020 Peter Gruber and Paolo Montemurro
# Universita della Svizzera italiana
# Contact: peter.gruber@usi.ch
# load in the package
library(gradeR)
library(testthat)
library(stringr)
library(evaluate)
# also requires dplyr
# source the functions and the test
source("functions.R")
source("parse_txt.R") # Can be done as a function. However, for this case I guess it's more straight forward like this
# ----- SETUP <----------
#file_modus <- "local"           # "local" for debugging, if you do not have a folder /autograder/results in your structure
file_modus <- "gradescope"       # "gradescope" for production
submission_file <- paste0("..",.Platform$file.sep,"submission",.Platform$file.sep, ass_name)
# -----
my_test_file    <- "tests.R"
solution_file   <- "solution.R"
# function
calcGradesForGradescope <- function(submission_file, my_test_file, debug=FALSE){
if(missing(my_test_file)){stop("Must have a test file")} # Check test file
if(!file.exists(submission_file)) { # Check file naming
my_cmd <- paste0("ls ..",.Platform$file.sep,"submission")
student_filename <- system(my_cmd,intern = TRUE)
wrong_name_msg = paste0('Your submission cannot be evaluated, because it has an incorrect file name. The file you have submitted is called "' ,student_filename,'".')
output_0_grade("Correct file name", wrong_name_msg, .Platform$file.sep)
stop("Wrong filename. results written")
}
if(n_tests == 0){stop("you need at least one graded question")} # Check questions
testEnv <- new.env() # run student's submission in a separate environment
#tryCatch(source(submission_file, testEnv),  error = function(c) c, warning = function(c) c ,message = function(c) c)
replay(evaluate(file(submission_file))) # Run the program of the student line by line. Student can make errors. https://stackoverflow.com/questions/14612190/is-there-a-way-to-source-and-continue-after-an-error
line_by_line   <- evaluate(file(submission_file))
errors_bool    <- grepl("error", sapply(line_by_line, class))
errors         <- line_by_line[errors_bool]
# Line that created an error
error_code_bool <- errors_bool[-1] # Because code with error is always in the line before the error
code_of_errors  <- line_by_line[error_code_bool]
#warnings_bool  <- grepl("warning", sapply(line_by_line, class))
#warnings <- replay(line_by_line[warnings_bool])
if(length(errors)>0){ #if there is any error...
if(nchar(code_of_errors[[1]][1])>200){ # If R reports a very long code as a error, we have a syntax error. (possible to do it also with parsing the error message...)
format_errors <- paste0("You committed a syntax error, and we couldn't evaluate the code.\n",
"R reports the following message:\n\n",  errors[[1]])
}else{
format_errors  <- ""
for(i in 1:length(errors)){
format_errors <- paste0(format_errors,
"--- The following script of your code produces compiling error: ---\n",
separator,"\n",code_of_errors[[i]][[1]],"\n",separator,
"\n--- Error message: ---\n",
errors[[i]],
"\n\n",big_separator,"\n")
}
} # Output complete error message
output_0_grade("Code produces errors", format_errors, sep=.Platform$file.sep)
stop("Code produces errors. results written")
}
# source solution, if exists
if(file.exists(solution_file)){source(solution_file)}
# source submission parser
parsing_submission  <- Parser(submission_file)
submission_code <- parsing_submission[[2]]
code_length     <- parsing_submission[[3]]
first_row       <- parsing_submission[[4]]
# Distinguish between parsing or exercise
exercise_names   <- unlist(exercises)[ c(TRUE,FALSE,FALSE,FALSE,FALSE) ] #Select names
which_is_parsing <- grepl("^@ ", exercise_names)                   #Select parsing exercises
if (any(which_is_parsing))
{
parsing_ex       <- exercises[which_is_parsing]                  #Subset parsing ex
for(i in 1:length(parsing_ex)){
print(i)
parsing_ex[[i]][1] <- substring(parsing_ex[[i]][1],3)            # Delete @ and space
# isolate the keyword (between ( and , )): can't we now look between the ""?
keyword            <- regmatches(parsing_ex[[i]][2], gregexpr("(?<=\\().*?(?=,)", parsing_ex[[i]][2], perl=T))[[1]][1] # https://stackoverflow.com/questions/8613237/extract-info-inside-all-parenthesis-in-r
# TODO: add more special signs
if( length(grep("\\(", keyword))>0 ){keyword <- Replace_special_character(keyword, "(")} # Replace ( with //( for regex
word_check         <- nrow(dplyr::filter(submission_code, grepl(keyword,V1))) # check in submission code
parsing_ex[[i]][2] <- str_replace(parsing_ex[[i]][2],"(?<=\\().*?(?=,)", as.character(word_check)) # replace variable name with result
}
exercises[which_is_parsing] <- parsing_ex # Bring back to exercises
}
# test the student's submissions
lr               <- ListReporter$new()                                      ### Original code
out              <- test_file(my_test_file, reporter=lr,  env = testEnv)    ### Original code
tests            <- list()                                                  ### Original code
tests[["tests"]] <- list()                                                  ### Original code
raw_results      <- lr$results$as_list()
for(i in 1:n_tests){
ex                    <- exercises[[i]]
test_name             <- ex[1]
test_max_score        <- ex[3]
assertionResults      <- raw_results[[i]]$results
success               <- all(sapply(assertionResults, methods::is, "expectation_success"))
test_score            <- ifelse(success, test_max_score, 0)
tests[["tests"]][[i]] <- list(name = test_name,
score = test_score,
max_score = test_max_score,
visibility = "visible")
# Paste messages...
if(test_score != test_max_score){
R_error <- raw_results[[i]][["results"]][[1]][["message"]]
if(grepl("could not find|not found",R_error)){ # Paste naming error (based on R error message). Could increase the error naming list
msg <- "Your environment doesn't contain the variable/function requested. Check your naming."
}else{ # If the variable is present...
if(ex[4]!=""){ # Paste user-defined errors if specified
msg <- paste0(ex[4], "\n")
}else{ # Paste R pre-defined errors otherwise
msg <- paste0("R reports the following error(s): \n",R_error)
}
}
# Paste correct result
}else{
if(ex[5]!=""){
msg <- paste0(ex[5], "\n")}else{
msg <- "Congratulations, the answer is correct!"
}
}
# Insert the message
tests[["tests"]][[i]][["output"]] <- msg
}
#Debug stuff
if(debug){print(tests)}
# Prepare the output location
# Use / or \ .Platform$file.sep
json_filename <- paste0("..",.Platform$file.sep,"results",.Platform$file.sep,"results.json")
# now write out all the stuff to a json file
write(jsonlite::toJSON(tests, auto_unbox = T), file = json_filename)
}
calcGradesForGradescope(submission_file, my_test_file)
source("parse_txt.R") # Can be done as a function. However, for this case I guess it's more straight forward like this
# load in the package
library(gradeR)
library(testthat)
library(stringr)
library(evaluate)
# source the functions and the test
source("functions.R")
source("parse_txt.R") # Can be done as a function. However, for this case I guess it's more straight forward like this
