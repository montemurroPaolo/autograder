# Libraries
library(evaluate)
library(stringr)
# Load functions / global variables
source("load_text.R")        # Used both from parse_config and shortcuts
source("parse_config.R")     # Make computer readable the instruction of config.txt
source("run_code.R")         # Rune the code in a separate environment
source("shortcuts.R")        # Fancy shortcuts for the tests!
source("do_assessment.R")    # Modify all_tests with tests results
source("create_feedback.R")  # From the test results, create the feedback
source("categorize_error.R") # Creates the error message for compiling or syntax error by run_code
text_params     <- read.csv(file = "text_params.csv", head = TRUE, sep=",", row.names = 1, stringsAsFactors = F)
ass_folder      <- "assignment1"
course_folder   <- "course1"
sep             <- .Platform$file.sep
main_folder     <- paste0("..",sep,"courses",sep,course_folder,sep,ass_folder,sep)
main_folder
pre_path        <- paste0("..", sep, "content", sep, "courses", sep)
pre_path
# Paths
sep             <- .Platform$file.sep
pre_path        <- paste0("..", sep, "content", sep, "courses", sep)
ass_folder      <- "assignment1"
course_folder   <- "course1"
main_folder     <- paste0(pre_path, course_folder,sep,ass_folder,sep)
main_folder
stud_submission <- paste0(assignment_folder, "submissions",sep,temp_sub_name)
temp_sub_name      <- "assignment02.R"
temp_ass_name      <- "assignment1"
temp_course_name   <- "course1"
assignment_folder  <- paste0(pre_path, temp_course_name,sep,temp_ass_name,sep)
stud_submission <- paste0(assignment_folder, "submissions",sep,temp_sub_name)
stud_submission
paste0(assignment_folder,"config.txt")
# Paths
sep                <- .Platform$file.sep
pre_path           <- paste0("..", sep, "content", sep, "courses", sep)
temp_sub_name      <- "assignment02.R"
temp_ass_name      <- "assignment1"
temp_course_name   <- "course1"
assignment_folder  <- paste0(pre_path, temp_course_name,sep,temp_ass_name,sep)
#stud_submission <- args[1]
stud_submission <- paste0(assignment_folder, "submissions",sep,temp_sub_name)
config_name     <- paste0(assignment_folder, "config.txt")
solution_name   <- paste0(assignment_folder, "solution.R")
### For being able to call grader() as a function, submission and solution must be global variables.
run_submission <- run_code(stud_submission) # Run the submission in a separate environment and save it.
submission     <- run_submission$run_env
run_solution   <- run_code(solution_name, student=FALSE)# Run the solution in a separate environment and save it
solution       <- run_solution$run_env
solution_name
grade <- function(stud_submission,submission,solution,
csv=FALSE,txt=FALSE,json=TRUE,normalize=TRUE,show_test=TRUE){
# Determine the tests
all_tests      <- parse_config(file_name = config_name, normalize=normalize)
# Assess the results of the tests
all_tests_res  <- do_assessment(all_tests, stud_submission)
#print(stud_submission)
# Create feedback
feedback       <- create_feedback(all_tests_res, csv=csv, txt=txt, json=json)
return(feedback)
}
grade()
normalize=TRUE
# Determine the tests
all_tests      <- parse_config(file_name = config_name, normalize=normalize)
config_name
setwd("~/GitHub/django_autograder/autograder/grader_files")
parse_config(file_name = config_name, normalize=normalize)
# Parse txt file
list_of_config <- load_text(file_name)
list_of_config <- load_text(file_name)
config_name
assignment_folder  <- paste0(pre_path, temp_course_name,sep,temp_ass_name,sep)
#stud_submission <- args[1]
stud_submission <- paste0(assignment_folder, "submissions",sep,temp_sub_name)
config_name     <- paste0(assignment_folder, "config.txt")
solution_name   <- paste0(assignment_folder, "solution.R")
### For being able to call grader() as a function, submission and solution must be global variables.
run_submission <- run_code(stud_submission) # Run the submission in a separate environment and save it.
submission     <- run_submission$run_env
run_solution   <- run_code(solution_name, student=FALSE)# Run the solution in a separate environment and save it
solution       <- run_solution$run_env
# Determine the tests
all_tests      <- parse_config(file_name = config_name, normalize=normalize)
# Assess the results of the tests
all_tests_res  <- do_assessment(all_tests, stud_submission)
# Create feedback
feedback       <- create_feedback(all_tests_res, csv=csv, txt=txt, json=json)
grade <- function(stud_submission,submission,solution,
csv=FALSE,txt=FALSE,json=TRUE,normalize=TRUE,show_test=TRUE){
# Determine the tests
all_tests      <- parse_config(file_name = config_name, normalize=normalize)
# Assess the results of the tests
all_tests_res  <- do_assessment(all_tests, stud_submission)
#print(stud_submission)
# Create feedback
feedback       <- create_feedback(all_tests_res, csv=csv, txt=txt, json=json)
return(feedback)
}
grade()
result_folder      <- paste0(assignment_folder,"results", sep)
grade <- function(stud_submission,submission,solution,
csv=FALSE,txt=FALSE,json=TRUE,normalize=TRUE,show_test=TRUE){
# Determine the tests
all_tests      <- parse_config(file_name = config_name, normalize=normalize)
# Assess the results of the tests
all_tests_res  <- do_assessment(all_tests, stud_submission)
#print(stud_submission)
# Create feedback
feedback       <- create_feedback(all_tests_res,directory, csv=csv, txt=txt, json=json)
return(feedback)
}
grade()
grade <- function(stud_submission,submission,solution,
csv=FALSE,txt=FALSE,json=TRUE,normalize=TRUE,show_test=TRUE){
# Determine the tests
all_tests      <- parse_config(file_name = config_name, normalize=normalize)
# Assess the results of the tests
all_tests_res  <- do_assessment(all_tests, stud_submission)
#print(stud_submission)
# Create feedback
feedback       <- create_feedback(all_tests_res,result_folder, csv=csv, txt=txt, json=json)
return(feedback)
}
grade()
# (c) 2020 Peter Gruber and Paolo Montemurro
# Universita della Svizzera italiana
# Contact: peter.gruber@usi.ch - montep@usi.ch
# Libraries
library(evaluate)
library(stringr)
# Load functions / global variables
source("load_text.R")        # Used both from parse_config and shortcuts
source("parse_config.R")     # Make computer readable the instruction of config.txt
source("run_code.R")         # Rune the code in a separate environment
source("shortcuts.R")        # Fancy shortcuts for the tests!
source("do_assessment.R")    # Modify all_tests with tests results
source("create_feedback.R")  # From the test results, create the feedback
source("categorize_error.R") # Creates the error message for compiling or syntax error by run_code
text_params     <- read.csv(file = "text_params.csv", head = TRUE, sep=",", row.names = 1, stringsAsFactors = F)
args <- commandArgs(trailingOnly = TRUE)
# If I'm calling this from command line
if(length(args)!=0){
# Paths
sep                <- .Platform$file.sep
pre_path           <- paste0("..", sep, "content", sep, "courses", sep)
temp_sub_name      <- "assignment02.R"
temp_ass_name      <- "assignment1"
temp_course_name   <- "course1"
assignment_folder  <- paste0(pre_path, temp_course_name,sep,temp_ass_name,sep)
result_folder      <- paste0(assignment_folder,"results", sep)
#stud_submission <- args[1]
stud_submission <- paste0(assignment_folder, "submissions",sep,temp_sub_name)
config_name     <- paste0(assignment_folder, "config.txt")
solution_name   <- paste0(assignment_folder, "solution.R")
### For being able to call grader() as a function, submission and solution must be global variables.
run_submission <- run_code(stud_submission) # Run the submission in a separate environment and save it.
submission     <- run_submission$run_env
run_solution   <- run_code(solution_name, student=FALSE)# Run the solution in a separate environment and save it
solution       <- run_solution$run_env
}
grade <- function(stud_submission,submission,solution,
csv=FALSE,txt=FALSE,json=TRUE,normalize=TRUE,show_test=TRUE){
# Determine the tests
all_tests      <- parse_config(file_name = config_name, normalize=normalize)
# Assess the results of the tests
all_tests_res  <- do_assessment(all_tests, stud_submission)
#print(stud_submission)
# Create feedback
feedback       <- create_feedback(all_tests_res,result_folder, csv=csv, txt=txt, json=json)
return(feedback)
}
# Call grader
if(length(args)!=0){
grade()
}
grade()
# (c) 2020 Peter Gruber and Paolo Montemurro
# Universita della Svizzera italiana
# Contact: peter.gruber@usi.ch - montep@usi.ch
# Libraries
library(evaluate)
library(stringr)
# Load functions / global variables
source("load_text.R")        # Used both from parse_config and shortcuts
source("parse_config.R")     # Make computer readable the instruction of config.txt
source("run_code.R")         # Rune the code in a separate environment
source("shortcuts.R")        # Fancy shortcuts for the tests!
source("do_assessment.R")    # Modify all_tests with tests results
source("create_feedback.R")  # From the test results, create the feedback
source("categorize_error.R") # Creates the error message for compiling or syntax error by run_code
text_params     <- read.csv(file = "text_params.csv", head = TRUE, sep=",", row.names = 1, stringsAsFactors = F)
args <- commandArgs(trailingOnly = TRUE)
# Paths
sep                <- .Platform$file.sep
pre_path           <- paste0("..", sep, "courses", sep)
temp_sub_name      <- "assignment02.R"
temp_ass_name      <- "assignment1"
temp_course_name   <- "course1"
assignment_folder  <- paste0(pre_path, temp_course_name,sep,temp_ass_name,sep)
assignment_folder
# (c) 2020 Peter Gruber and Paolo Montemurro
# Universita della Svizzera italiana
# Contact: peter.gruber@usi.ch - montep@usi.ch
# Libraries
library(evaluate)
library(stringr)
# Load functions / global variables
source("load_text.R")        # Used both from parse_config and shortcuts
source("parse_config.R")     # Make computer readable the instruction of config.txt
source("run_code.R")         # Rune the code in a separate environment
source("shortcuts.R")        # Fancy shortcuts for the tests!
source("do_assessment.R")    # Modify all_tests with tests results
source("create_feedback.R")  # From the test results, create the feedback
source("categorize_error.R") # Creates the error message for compiling or syntax error by run_code
text_params     <- read.csv(file = "text_params.csv", head = TRUE, sep=",", row.names = 1, stringsAsFactors = F)
args <- commandArgs(trailingOnly = TRUE)
# If I'm calling this from command line
if(length(args)!=0){
# Paths
sep                <- .Platform$file.sep
pre_path           <- paste0("..", sep, "courses", sep)
temp_sub_name      <- "assignment02.R"
temp_ass_name      <- "assignment1"
temp_course_name   <- "course1"
assignment_folder  <- paste0(pre_path, temp_course_name,sep,temp_ass_name,sep)
result_folder      <- paste0(assignment_folder,"results", sep)
#stud_submission <- args[1]
stud_submission <- paste0(assignment_folder, "submissions",sep,temp_sub_name)
config_name     <- paste0(assignment_folder, "config.txt")
solution_name   <- paste0(assignment_folder, "solution.R")
### For being able to call grader() as a function, submission and solution must be global variables.
run_submission <- run_code(stud_submission) # Run the submission in a separate environment and save it.
submission     <- run_submission$run_env
run_solution   <- run_code(solution_name, student=FALSE)# Run the solution in a separate environment and save it
solution       <- run_solution$run_env
}
grade <- function(stud_submission,submission,solution,
csv=FALSE,txt=FALSE,json=TRUE,normalize=TRUE,show_test=TRUE){
# Determine the tests
all_tests      <- parse_config(file_name = config_name, normalize=normalize)
# Assess the results of the tests
all_tests_res  <- do_assessment(all_tests, stud_submission)
#print(stud_submission)
# Create feedback
feedback       <- create_feedback(all_tests_res,result_folder, csv=csv, txt=txt, json=json)
return(feedback)
}
# Call grader
if(length(args)!=0){
grade()
}
grade()
# Paths
sep                <- .Platform$file.sep
pre_path           <- paste0("..", sep, "courses", sep)
temp_sub_name      <- "assignment02.R"
temp_ass_name      <- "assignment1"
temp_course_name   <- "course1"
assignment_folder  <- paste0(pre_path, temp_course_name,sep,temp_ass_name,sep)
result_folder      <- paste0(assignment_folder,"results", sep)
#stud_submission <- args[1]
stud_submission <- paste0(assignment_folder, "submissions",sep,temp_sub_name)
config_name     <- paste0(assignment_folder, "config.txt")
solution_name   <- paste0(assignment_folder, "solution.R")
### For being able to call grader() as a function, submission and solution must be global variables.
run_submission <- run_code(stud_submission) # Run the submission in a separate environment and save it.
submission     <- run_submission$run_env
run_solution   <- run_code(solution_name, student=FALSE)# Run the solution in a separate environment and save it
solution       <- run_solution$run_env
grade()
# Create feedback
feedback       <- create_feedback(all_tests_res,result_folder, csv=csv, txt=txt, json=json)
# Determine the tests
all_tests      <- parse_config(file_name = config_name, normalize=TRUE)
# Assess the results of the tests
all_tests_res  <- do_assessment(all_tests, stud_submission)
# Create feedback
feedback       <- create_feedback(all_tests_res,result_folder, csv=csv, txt=txt, json=json)
# Create feedback
feedback       <- create_feedback(all_tests_res,result_folder)
result_folder      <- paste0(assignment_folder,"results", sep)
# Libraries
library(evaluate)
library(stringr)
# Load functions / global variables
source("load_text.R")        # Used both from parse_config and shortcuts
source("parse_config.R")     # Make computer readable the instruction of config.txt
source("run_code.R")         # Rune the code in a separate environment
source("shortcuts.R")        # Fancy shortcuts for the tests!
source("do_assessment.R")    # Modify all_tests with tests results
source("create_feedback.R")  # From the test results, create the feedback
source("categorize_error.R") # Creates the error message for compiling or syntax error by run_code
text_params     <- read.csv(file = "text_params.csv", head = TRUE, sep=",", row.names = 1, stringsAsFactors = F)
sep                <- .Platform$file.sep
pre_path           <- paste0("..", sep, "courses", sep)
temp_sub_name      <- "assignment02.R"
temp_ass_name      <- "assignment1"
temp_course_name   <- "course1"
assignment_folder  <- paste0(pre_path, temp_course_name,sep,temp_ass_name,sep)
result_folder      <- paste0(assignment_folder,"results", sep)
#stud_submission <- args[1]
stud_submission <- paste0(assignment_folder, "submissions",sep,temp_sub_name)
config_name     <- paste0(assignment_folder, "config.txt")
solution_name   <- paste0(assignment_folder, "solution.R")
### For being able to call grader() as a function, submission and solution must be global variables.
run_submission <- run_code(stud_submission) # Run the submission in a separate environment and save it.
submission     <- run_submission$run_env
run_solution   <- run_code(solution_name, student=FALSE)# Run the solution in a separate environment and save it
solution       <- run_solution$run_env
# Determine the tests
all_tests      <- parse_config(file_name = config_name, normalize=TRUE)
# Assess the results of the tests
all_tests_res  <- do_assessment(all_tests, stud_submission)
# Create feedback
feedback       <- create_feedback(all_tests_res, result_folder)
# Create feedback
feedback       <- create_feedback(all_tests_res, result_folder)
.Platform$file.sep
utils::getSrcDirectory()[1]
dirname(rstudioapi::getActiveDocumentContext()$path)
# Set working directory
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
dirname(parent.frame(2)$ofile)
# Set working directory
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
dirname(parent.frame(2)$ofile)
dirname(parent.frame(2)$ofile)
# Set working directory
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
dirname(sys.frame(1)$ofile)
# Set working directory
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
dirname(sys.frame()$ofile)
getwd()
setwd("~/GitHub/django_autograder/autograder")
setwd("/content")
setwd("/content")
getwd()
setwd("~/GitHub/django_autograder/autograder")
setwd("./content")
getwd()
setwd("~/GitHub/autograder/autograder v 2.0.0/autograder")
library(shiny); runApp('autograder_shiny.R')
setwd("~/GitHub/autograder/autograder v 2.0.0/autograder")
library(shiny); runApp('autograder_shiny.R')
# Determine the tests
all_tests      <- parse_config(file_name = config_name, normalize=normalize)
# Universita della Svizzera italiana
# Contact: peter.gruber@usi.ch - montep@usi.ch
# Libraries
library(evaluate)
library(stringr)
# Load functions / global variables
source("load_text.R")        # Used both from parse_config and shortcuts
source("parse_config.R")     # Make computer readable the instruction of config.txt
source("run_code.R")         # Rune the code in a separate environment
source("shortcuts.R")        # Fancy shortcuts for the tests!
source("do_assessment.R")    # Modify all_tests with tests results
source("create_feedback.R")  # From the test results, create the feedback
source("categorize_error.R") # Creates the error message for compiling or syntax error by run_code
text_params     <- read.csv(file = "text_params.csv", head = TRUE, sep=",", row.names = 1, stringsAsFactors = F)
# Parameters always valid (uncomment if not using shiny)
ass_folder      <- "assignment01"
course_folder   <- "Programming in Finance 2020"
sep             <- .Platform$file.sep
main_folder     <- paste0("..",sep,"courses",sep,course_folder,sep,ass_folder,sep)
stud_submission       <- load_text(paste0(main_folder,"config.txt"))$first_row
stud_submission       <- paste0(main_folder,"submissions",sep, stud_submission)
config_name     <- paste0(main_folder,"config.txt")
solution_name   <- paste0(main_folder,"solution.R")
### For being able to call grader() as a function, submission and solution must be global variables.
run_submission <- run_code(stud_submission) # Run the submission in a separate environment and save it.
submission     <- run_submission$run_env
run_solution   <- run_code(solution_name, student=FALSE)# Run the solution in a separate environment and save it
solution       <- run_solution$run_env
# Determine the tests
all_tests      <- parse_config(file_name = config_name, normalize=TRUE)
# Assess the results of the tests
all_tests_res  <- do_assessment(all_tests, stud_submission)
View(all_tests)
all_tests[[1]]
